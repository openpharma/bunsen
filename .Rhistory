data('oak')
cox_event <- coxph(Surv(OS, os.status) ~ trt+btmb+pdl1, data=oak)
cox_censor <- coxph(Surv(OS, 1-os.status) ~trt+btmb+pdl1, data=oak)
model=get_marginal_effect(trt = 'trt',cox_event,cox_censor,M=10000,data=oak,seed = 1)
model
summary(model)
summary(model)
a=summary(model)
a
summary(model)
View(a)
print.summary.summary_marginal_cox <- function(x,...){
if(inherits(x,'summary_marginal_cox')){
cat('Call:\n')
print(x$formula)
cat('Marginal treatment effect calculated by N =',x$M,'simulations\n')
cat('Treatment variable:',x$trt,'------ Number of sample:',x$N,'\n')
cat('Number of events in cox_event:',x$nevent,'\n')
cat('Number of events in cox_censor:',x$nevent_c,'\n')
cat('Random seed = ',x$seed,'\n')
cat('Original treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",
x$trt,x$original_cox['coef'],x$original_cox['exp(coef)'],x$original_cox['se(coef)'],x$original_cox['z'],x$original_cox['Pr(>|z|)']))
cat('Marginal treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",x$trt,x$coef,exp(x$coef),x$SE[1],x$z_value,x$p_value))
cat('95% CI of Marginal treatment effect (bootstrap):',sprintf('%.3f %s %.3f',x$SE[2],',',x$SE[3]))
}
}
summary(model)
model
View(model)
print.summary.marginal_cox <- function(x,...){
if(inherits(x,'summary_marginal_cox')){
cat('Call:\n')
print(x$formula)
cat('Marginal treatment effect calculated by N =',x$M,'simulations\n')
cat('Treatment variable:',x$trt,'------ Number of sample:',x$N,'\n')
cat('Number of events in cox_event:',x$nevent,'\n')
cat('Number of events in cox_censor:',x$nevent_c,'\n')
cat('Random seed = ',x$seed,'\n')
cat('Original treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",
x$trt,x$original_cox['coef'],x$original_cox['exp(coef)'],x$original_cox['se(coef)'],x$original_cox['z'],x$original_cox['Pr(>|z|)']))
cat('Marginal treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",x$trt,x$coef,exp(x$coef),x$SE[1],x$z_value,x$p_value))
cat('95% CI of Marginal treatment effect (bootstrap):',sprintf('%.3f %s %.3f',x$SE[2],',',x$SE[3]))
}
}
summary(model)
print.summary.marginal_cox <- function(x,...){
if(inherits(x,'summary_marginal_cox')){
cat('Call:\n')
print(x$formula)
cat('Marginal treatment effect calculated by N =',x$M,'simulations\n')
cat('Treatment variable:',x$trt,'------ Number of sample:',x$N,'\n')
cat('Number of events in cox_event:',x$nevent,'\n')
cat('Number of events in cox_censor:',x$nevent_c,'\n')
cat('Random seed = ',x$seed,'\n')
cat('Original treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",
x$trt,x$original_cox['coef'],x$original_cox['exp(coef)'],x$original_cox['se(coef)'],x$original_cox['z'],x$original_cox['Pr(>|z|)']))
cat('Marginal treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",x$trt,x$coef,exp(x$coef),x$SE[1],x$z_value,x$p_value))
cat('95% CI of Marginal treatment effect (bootstrap):',sprintf('%.3f %s %.3f',x$SE[2],',',x$SE[3]))
}
}
model
summary(model)
devtools::load_all(".")
print.summary.marginal_cox <- function(x,...){
if(inherits(x,'summary_marginal_cox')){
cat('Call:\n')
print(x$formula)
cat('Marginal treatment effect calculated by N =',x$M,'simulations\n')
cat('Treatment variable:',x$trt,'------ Number of sample:',x$N,'\n')
cat('Number of events in cox_event:',x$nevent,'\n')
cat('Number of events in cox_censor:',x$nevent_c,'\n')
cat('Random seed = ',x$seed,'\n')
cat('Original treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",
x$trt,x$original_cox['coef'],x$original_cox['exp(coef)'],x$original_cox['se(coef)'],x$original_cox['z'],x$original_cox['Pr(>|z|)']))
cat('Marginal treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",x$trt,x$coef,exp(x$coef),x$SE[1],x$z_value,x$p_value))
cat('95% CI of Marginal treatment effect (bootstrap):',sprintf('%.3f %s %.3f',x$SE[2],',',x$SE[3]))
}
}
data('oak')
cox_event <- coxph(Surv(OS, os.status) ~ trt+btmb+pdl1, data=oak)
cox_censor <- coxph(Surv(OS, 1-os.status) ~trt+btmb+pdl1, data=oak)
model=get_marginal_effect(trt = 'trt',cox_event,cox_censor,M=10000,data=oak,seed = 1)
model
summary(model)
devtools::load_all(".")
devtools::load_all(".")
model=get_marginal_effect(trt = 'trt',cox_event,cox_censor,M=10000,data=oak,seed = 1)
rm(print.summary.marginal_cox)
model
summary(model)
devtools::load_all(".")
summary(model)
a=summary(model)
a
View(a)
#' Print the summary of marginal treatment effects for hazard ratio (HR)
#'
#' print method for class 'summary_marginal_cox'.
#'
#' @param x an object of class 'summary_marginal_cox'
#' @param ... Parameters for other methods.
#' @keywords internal
#' @export
print.summary.marginal_cox <- function(x,...){
cat('1')
if(inherits(x,'summary.marginal_cox')){
cat('Call:\n')
print(x$formula)
cat('Marginal treatment effect calculated by N =',x$M,'simulations\n')
cat('Treatment variable:',x$trt,'------ Number of sample:',x$N,'\n')
cat('Number of events in cox_event:',x$nevent,'\n')
cat('Number of events in cox_censor:',x$nevent_c,'\n')
cat('Random seed = ',x$seed,'\n')
cat('Original treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",
x$trt,x$original_cox['coef'],x$original_cox['exp(coef)'],x$original_cox['se(coef)'],x$original_cox['z'],x$original_cox['Pr(>|z|)']))
cat('Marginal treatment effect:\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','exp(coef)','se(coef)','z','Pr(>|z|)'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f  %-10f\n",x$trt,x$coef,exp(x$coef),x$SE[1],x$z_value,x$p_value))
cat('95% CI of Marginal treatment effect (bootstrap):',sprintf('%.3f %s %.3f',x$SE[2],',',x$SE[3]))
}
}
summary(model)
View(model)
#' Summarizing the marginal treatment effects for hazard ratio (HR)
#'
#' summary method for class 'marginal_cox'.
#'
#' @param object an object of class 'marginal_cox'
#' @param ... Parameters for other methods.
#' @importFrom stats pnorm
#' @keywords internal
#' @export
summary.marginal_cox <- function(object,...){
tmp=summary(object$cox_event)$coefficients
e_cox=tmp[rownames(tmp)=='trt',]
z_value <- ifelse(length(object$SE>1), as.numeric(object$beta / object$SE[1]),NA)
p_value <- ifelse(length(object$SE>1),as.numeric(2 * (1 - pnorm(abs(z_value)))),NA)
ret=structure(list(
trt=object$trt,
formula=object$cox_event$formula,
original_cox=e_cox,
M=object$M,
N=nrow(object$data),
nevent=object$cox_event$nevent,
nevent_c=object$cox_censor$nevent,
seed=object$seed,
coef=object$beta,
SE=object$SE,
z_value=z_value,
p_value=p_value
),class='summary.marginal_cox')
return(ret)
}
summary(model)
summary(model)
a
devtools::load_all(".")
data('oak')
cox_event <- coxph(Surv(OS, os.status) ~ trt+btmb+pdl1, data=oak)
cox_censor <- coxph(Surv(OS, 1-os.status) ~trt+btmb+pdl1, data=oak)
model=get_marginal_effect(trt = 'trt',cox_event,cox_censor,M=10000,data=oak,seed = 1)
model
summary(model)
data("oak")
tau <- 26
time <- oak$OS
status <- oak$os.status
trt <- oak$trt
covariates <- oak[, c("btmb", "pdl1")]
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
result
result
?boot
devtools::load_all(".")
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
result
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
#' @examples
#'
#' data("oak")
#' tau <- 26
#' time <- oak$OS
#' status <- oak$os.status
#' trt <- oak$trt
#' covariates <- oak[, c("btmb", "pdl1")]
#' get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
#'
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1) {
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
#' @examples
#'
#' data("oak")
#' tau <- 26
#' time <- oak$OS
#' status <- oak$os.status
#' trt <- oak$trt
#' covariates <- oak[, c("btmb", "pdl1")]
#' get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
#'
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1) {
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
#' @examples
#'
#' data("oak")
#' tau <- 26
#' time <- oak$OS
#' status <- oak$os.status
#' trt <- oak$trt
#' covariates <- oak[, c("btmb", "pdl1")]
#' get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
#'
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1) {
#' @examples
#'
#' data("oak")
#' tau <- 26
#' time <- oak$OS
#' status <- oak$os.status
#' trt <- oak$trt
#' covariates <- oak[, c("btmb", "pdl1")]
#' get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
#'
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
tau_max <- min(max(time[trt == 0]), max(time[trt == 1]))
if (tau > tau_max) stop(sprintf(c("The maximum tau of current sampe is ", round(tau_max, 3), ". Please choose a reasonable tau.")), call. = FALSE)
if (tau <= 0) stop(sprintf(c("Tau should be greater than 0!")), call. = FALSE)
if (is.null(covariates)) {
results <- rmst_unadjust(time, status, trt, tau)
} else {
covariates <- as.data.frame(covariates)
dt <- as.data.frame(cbind(time, status, trt, covariates))
f <- as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)"))
fit <- coxph(f, data = dt)
delta <- rmst_point_estimate(fit, dt = dt, tau)
output <- delta$output
if (SE == "boot") {
set.seed(seed)
out <- boot(data = dt, .rmst_boot_fx, R = n.boot, fit = fit, tau = tau, covariates = covariates,f=f)
se <- sd(out$t, na.rm = T)
lb <- quantile(out$t, prob = .025, na.rm = T)
ub <- quantile(out$t, prob = .975, na.rm = T)
out <- c(SE = se, lb, ub)
} else if (SE == "delta") {
out <- rmst_delta(fit, time, trt, covariates, tau, surv0 = delta$surv0, surv1 = delta$surv1, cumhaz0 = delta$cumhaz0, cumhaz1 = delta$cumhaz1)
out <- c(SE = out, `2.5%` = output - 1.96 * out, `97.5%` = output + 1.96 * out)
n.boot=NA
}
results <- structure(list(formula=f,RMST = output, SE = out,tau=tau,SE_type=SE,n.boot=n.boot),class=c('rmst_bunsen'))
}
return(results)
}
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
tau_max <- min(max(time[trt == 0]), max(time[trt == 1]))
if (tau > tau_max) stop(sprintf(c("The maximum tau of current sampe is ", round(tau_max, 3), ". Please choose a reasonable tau.")), call. = FALSE)
if (tau <= 0) stop(sprintf(c("Tau should be greater than 0!")), call. = FALSE)
if (is.null(covariates)) {
results <- rmst_unadjust(time, status, trt, tau)
} else {
covariates <- as.data.frame(covariates)
dt <- as.data.frame(cbind(time, status, trt, covariates))
f <- as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)"))
fit <- coxph(as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)")), data = dt)
delta <- rmst_point_estimate(fit, dt = dt, tau)
output <- delta$output
if (SE == "boot") {
set.seed(seed)
out <- boot(data = dt, .rmst_boot_fx, R = n.boot, fit = fit, tau = tau, covariates = covariates)
se <- sd(out$t, na.rm = T)
lb <- quantile(out$t, prob = .025, na.rm = T)
ub <- quantile(out$t, prob = .975, na.rm = T)
out <- c(SE = se, lb, ub)
} else if (SE == "delta") {
out <- rmst_delta(fit, time, trt, covariates, tau, surv0 = delta$surv0, surv1 = delta$surv1, cumhaz0 = delta$cumhaz0, cumhaz1 = delta$cumhaz1)
out <- c(SE = out, `2.5%` = output - 1.96 * out, `97.5%` = output + 1.96 * out)
n.boot=NA
}
results <- structure(list(formula=f,RMST = output, SE = out,tau=tau,SE_type=SE,n.boot=n.boot),class=c('rmst_bunsen'))
}
return(results)
}
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
result
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
tau_max <- min(max(time[trt == 0]), max(time[trt == 1]))
if (tau > tau_max) stop(sprintf(c("The maximum tau of current sampe is ", round(tau_max, 3), ". Please choose a reasonable tau.")), call. = FALSE)
if (tau <= 0) stop(sprintf(c("Tau should be greater than 0!")), call. = FALSE)
if (is.null(covariates)) {
results <- rmst_unadjust(time, status, trt, tau)
} else {
covariates <- as.data.frame(covariates)
dt <- as.data.frame(cbind(time, status, trt, covariates))
f <- as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)"))
fit <- coxph(as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)")), data = dt)
delta <- rmst_point_estimate(fit, dt = dt, tau)
output <- delta$output
if (SE == "boot") {
set.seed(seed)
try({
out <- boot(data = dt, .rmst_boot_fx, R = n.boot, fit = fit, tau = tau, covariates = covariates)
})
se <- sd(out$t, na.rm = T)
lb <- quantile(out$t, prob = .025, na.rm = T)
ub <- quantile(out$t, prob = .975, na.rm = T)
out <- c(SE = se, lb, ub)
} else if (SE == "delta") {
out <- rmst_delta(fit, time, trt, covariates, tau, surv0 = delta$surv0, surv1 = delta$surv1, cumhaz0 = delta$cumhaz0, cumhaz1 = delta$cumhaz1)
out <- c(SE = out, `2.5%` = output - 1.96 * out, `97.5%` = output + 1.96 * out)
n.boot=NA
}
results <- structure(list(formula=f,RMST = output, SE = out,tau=tau,SE_type=SE,n.boot=n.boot),class=c('rmst_bunsen'))
}
return(results)}
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
result
?try
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
tau_max <- min(max(time[trt == 0]), max(time[trt == 1]))
if (tau > tau_max) stop(sprintf(c("The maximum tau of current sampe is ", round(tau_max, 3), ". Please choose a reasonable tau.")), call. = FALSE)
if (tau <= 0) stop(sprintf(c("Tau should be greater than 0!")), call. = FALSE)
if (is.null(covariates)) {
results <- rmst_unadjust(time, status, trt, tau)
} else {
covariates <- as.data.frame(covariates)
dt <- as.data.frame(cbind(time, status, trt, covariates))
f <- as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)"))
fit <- coxph(as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)")), data = dt)
delta <- rmst_point_estimate(fit, dt = dt, tau)
output <- delta$output
if (SE == "boot") {
set.seed(seed)
try({
out <- boot(data = dt, .rmst_boot_fx, R = n.boot, fit = fit, tau = tau, covariates = covariates)
},silent = TRUE)
se <- sd(out$t, na.rm = T)
lb <- quantile(out$t, prob = .025, na.rm = T)
ub <- quantile(out$t, prob = .975, na.rm = T)
out <- c(SE = se, lb, ub)
} else if (SE == "delta") {
out <- rmst_delta(fit, time, trt, covariates, tau, surv0 = delta$surv0, surv1 = delta$surv1, cumhaz0 = delta$cumhaz0, cumhaz1 = delta$cumhaz1)
out <- c(SE = out, `2.5%` = output - 1.96 * out, `97.5%` = output + 1.96 * out)
n.boot=NA
}
results <- structure(list(formula=f,RMST = output, SE = out,tau=tau,SE_type=SE,n.boot=n.boot),class=c('rmst_bunsen'))
}
return(results)}
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
?suppressWarnings
get_rmst_estimate <- function(time, status, trt, covariates = NULL, tau, SE = "delta", n.boot = 1000,seed=1){
tau_max <- min(max(time[trt == 0]), max(time[trt == 1]))
if (tau > tau_max) stop(sprintf(c("The maximum tau of current sampe is ", round(tau_max, 3), ". Please choose a reasonable tau.")), call. = FALSE)
if (tau <= 0) stop(sprintf(c("Tau should be greater than 0!")), call. = FALSE)
if (is.null(covariates)) {
results <- rmst_unadjust(time, status, trt, tau)
} else {
covariates <- as.data.frame(covariates)
dt <- as.data.frame(cbind(time, status, trt, covariates))
f <- as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)"))
fit <- coxph(as.formula(paste0("Surv(time, status) ~ ", paste(names(covariates), collapse = "+"), "+strata(trt)")), data = dt)
delta <- rmst_point_estimate(fit, dt = dt, tau)
output <- delta$output
if (SE == "boot") {
set.seed(seed)
try(suppressWarnings({
out <- boot(data = dt, .rmst_boot_fx, R = n.boot, fit = fit, tau = tau, covariates = covariates)
}),silent = TRUE)
se <- sd(out$t, na.rm = T)
lb <- quantile(out$t, prob = .025, na.rm = T)
ub <- quantile(out$t, prob = .975, na.rm = T)
out <- c(SE = se, lb, ub)
} else if (SE == "delta") {
out <- rmst_delta(fit, time, trt, covariates, tau, surv0 = delta$surv0, surv1 = delta$surv1, cumhaz0 = delta$cumhaz0, cumhaz1 = delta$cumhaz1)
out <- c(SE = out, `2.5%` = output - 1.96 * out, `97.5%` = output + 1.96 * out)
n.boot=NA
}
results <- structure(list(formula=f,RMST = output, SE = out,tau=tau,SE_type=SE,n.boot=n.boot,seed=seed),class=c('rmst_bunsen'))
}
return(results)
}
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
result
#' Print the marginal restricted mean survival time (RMST)
#'
#' print method for class 'rmst_bunsen'.
#'
#' @param x an object of class 'rmst_bunsen'
#' @param ... Parameters for other methods.
#' @keywords internal
#' @export
print.rmst_bunsen <- function(x,...){
if(inherits(x,'rmst_bunsen')){
cat('Call:\n')
cat(deparse(x$formula), "\n")
cat('Restricted survival time:',x$tau,'\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','se(coef)','2.5%','97.5%'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f\n",'trt',x$RMST,x$SE[1],x$SE[2],x$SE[3]))
cat('Method for SE calculation:',x$SE_type)
if(x$SE_type=='boot') cat('Number of bootstrap:',x$n.boot,', random seed =',seed)
}
}
result
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
result
#' Print the marginal restricted mean survival time (RMST)
#'
#' print method for class 'rmst_bunsen'.
#'
#' @param x an object of class 'rmst_bunsen'
#' @param ... Parameters for other methods.
#' @keywords internal
#' @export
print.rmst_bunsen <- function(x,...){
if(inherits(x,'rmst_bunsen')){
cat('Call:\n')
cat(deparse(x$formula), "\n")
cat('Restricted survival time:',x$tau,'\n')
cat(sprintf("%-10s  %-10s  %-10s  %-10s  %-10s\n",'','coef','se(coef)','2.5%','97.5%'))
cat(sprintf("%-10s  %-10f  %-10f  %-10f  %-10f\n",'trt',x$RMST,x$SE[1],x$SE[2],x$SE[3]))
cat('Method for SE calculation:',x$SE_type)
if(x$SE_type=='boot') cat('Number of bootstrap:',x$n.boot,', random seed =',x$seed)
}
}
result
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
result
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot", seed = 2025)
result
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot", seed = 2025)
result
library(usethis)
library(bunsen)
devtools::load_all(".")
library(bunsen)
data('oak')
cox_event <- coxph(Surv(OS, os.status) ~ trt+btmb+pdl1, data=oak)
cox_censor <- coxph(Surv(OS, 1-os.status) ~trt+btmb+pdl1, data=oak)
model=get_marginal_effect(trt = 'trt',cox_event,cox_censor,M=10000,data=oak,seed = 1)
model
summary(model)
tau <- 26
time <- oak$OS
status <- oak$os.status
trt <- oak$trt
covariates <- oak[, c("btmb", "pdl1")]
result=get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
result
result_delta=get_rmst_estimate(time, status, trt, covariates, tau, SE = "delta")
result
result_delta
result_boot=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
result_boot
model
View(model)
result_delta
result_boot
devtools::load_all(".")
result_boot=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
result_boot
result_boot
result_boot=get_rmst_estimate(time, status, trt, covariates, tau, SE = "boot")
devtools::load_all(".")
result_boot
result_boot
tools::Rd2pdf("man/bunsen-package.Rd")
tools::Rd2pdf("man/calculate_statistics.Rd")
library(tools)
Rd2latex("man/bunsen-package.Rd")
Rd2latex("man/calculate_statistics.Rd")
Rd2latex("man/calculate_trt_effect.Rd")
Rd2latex("man/clmqControl")
Rd2latex("man/clmqControl.Rd")
Rd2latex("man/get_marginal_effect.Rd")
Rd2latex("man/get_point_estimate.Rd")
usethis::use_gpl_license()
?clustermq::Q
for >>apply/lapply>matrix
nchar('Marginal Estimation with Covariate Adjustment for Survival Endpoint in Clinical Trials')
nchar('Survival Endpoint Estimation with Covariate Adjustment in Clinical Trials')
nchar('Marginal Survival Estimation with Covariate Adjustment')
?clustermq:q
?clustermq:Q
?clustermq::Q
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
ls /tmp/Rtmpx54vVG
devtools::load_all(path="./", recompile=T)
devtools::load_all(path="./", recompile=T)
